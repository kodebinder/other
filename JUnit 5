import org.apache.http.client.HttpClient;
import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.ssl.SSLContextBuilder;
import org.apache.http.ssl.TrustStrategy;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.client.BufferingClientHttpRequestFactory;
import org.springframework.http.client.ClientHttpRequestFactory;
import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
import org.springframework.web.client.RestTemplate;

import javax.net.ssl.SSLContext;
import java.io.File;
import java.security.cert.X509Certificate;

@Configuration
@Slf4j
public class RestTemplateConfig {

    @Autowired
    @Qualifier(value = AppConstants.APPLN_PROPS)
    private AppProperties appProps;

    @Bean
    public RestTemplate restTemplate() {
        RestTemplate restTemplate = new RestTemplate();
        SSLContext sslContext = createSslContext();
        SSLConnectionSocketFactory socketFactory = new SSLConnectionSocketFactory(sslContext);
        HttpClient httpClient = HttpClients.custom().setSSLSocketFactory(socketFactory).build();
        HttpComponentsClientHttpRequestFactory factory = new HttpComponentsClientHttpRequestFactory(httpClient);
        ClientHttpRequestFactory bufferFactory = new BufferingClientHttpRequestFactory(factory);
        restTemplate.setRequestFactory(bufferFactory);

        return restTemplate;
    }

    private SSLContext createSslContext() {
        try {
            if (!appProps.isSslEnabled()) {
                TrustStrategy acceptingTrustStrategy = (X509Certificate[] chain, String authType) -> true;
                return SSLContexts.custom()
                        .loadTrustMaterial(null, acceptingTrustStrategy)
                        .build();
            } else {
                SSLContextBuilder sslContextBuilder = new SSLContextBuilder();
                return sslContextBuilder
                        .loadTrustMaterial(new File(appProps.getTrustStoreFile()), appProps.getTrustStorePass().toCharArray())
                        .build();
            }
        } catch (Exception e) {
            log.error("Error creating SSL context", e);
            throw new RuntimeException("Error creating SSL context", e);
        }
    }
}
Now, you can write a test that mocks the createSslContext method to cover the SSL context creation:

java
Copy code
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class RestTemplateConfigTest {

    @Mock
    private AppProperties appProperties;

    @InjectMocks
    private RestTemplateConfig restTemplateConfig;

    @Mock
    private SSLContext sslContext;

    @Test
    void restTemplateWithoutSSL() throws Exception {
        // Arrange
        when(appProperties.isSslEnabled()).thenReturn(false);
        when(restTemplateConfig.createSslContext()).thenReturn(sslContext);

        // Act
        RestTemplate restTemplate = restTemplateConfig.restTemplate();

        // Assert
        assertNotNull(restTemplate);
        assertInstanceOf(HttpComponentsClientHttpRequestFactory.class, restTemplate.getRequestFactory());
        assertInstanceOf(RestTemplate.class, restTemplate);
    }

    // Other test methods...

}
