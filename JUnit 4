
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClientBuilder;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.http.client.BufferingClientHttpRequestFactory;
import org.springframework.http.client.ClientHttpRequestFactory;
import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
import org.springframework.web.client.RestTemplate;

import javax.net.ssl.SSLContext;

import static org.junit.Assert.assertNotNull;
import static org.mockito.Mockito.when;

@RunWith(PowerMockRunner.class)
@PrepareForTest({ RestTemplateConfig.class, HttpClientBuilder.class, SSLContext.class })
public class RestTemplateConfigTest {

    @Mock
    @Qualifier(APPLN_PROPS)
    private AppProperties appProps;

    @InjectMocks
    private RestTemplateConfig restTemplateConfig;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testRestTemplateCreation() throws Exception {
        // Mock the behavior of appProps
        when(appProps.isSslEnabled()).thenReturn(true);

        // Mock static methods
        PowerMockito.mockStatic(HttpClientBuilder.class);
        PowerMockito.mockStatic(SSLContext.class);

        // Mock HttpClientBuilder
        CloseableHttpResponse httpResponseMock = PowerMockito.mock(CloseableHttpResponse.class);
        CloseableHttpClient httpClientMock = PowerMockito.mock(CloseableHttpClient.class);
        PowerMockito.when(HttpClientBuilder.create()).thenReturn(HttpClientBuilder.create());
        PowerMockito.when(HttpClientBuilder.create().setSSLSocketFactory(Mockito.any(SSLConnectionSocketFactory.class)))
                .thenReturn(HttpClientBuilder.create());
        PowerMockito.when(HttpClientBuilder.create().build()).thenReturn(httpClientMock);
        PowerMockito.when(httpClientMock.execute(Mockito.any())).thenReturn(httpResponseMock);

        // Mock SSLContext
        PowerMockito.when(SSLContext.getDefault()).thenReturn(null);
        PowerMockito.when(SSLContext.getInstance("TLS")).thenReturn(null);

        // Call the method that creates RestTemplate
        RestTemplate restTemplate = restTemplateConfig.restTemplate();

        // Assert that the restTemplate is not null
        assertNotNull(restTemplate);

        // Add more assertions based on your expected behavior
    }
}
