import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.io.File;
import java.security.cert.X509Certificate;

import javax.net.ssl.SSLContext;

import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.ssl.SSLContextBuilder;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.http.client.BufferingClientHttpRequestFactory;
import org.springframework.http.client.ClientHttpRequestFactory;
import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
import org.springframework.web.client.RestTemplate;

class RestTemplateConfigTest {

    private AppProperties appProperties;

    private RestTemplateConfig restTemplateConfig;

    @BeforeEach
    void setUp() {
        appProperties = mock(AppProperties.class);
        restTemplateConfig = new RestTemplateConfig(appProperties);
    }

    @Test
    void restTemplateWithoutSSL() throws Exception {
        when(appProperties.isSslEnabled()).thenReturn(false);

        RestTemplate restTemplate = restTemplateConfig.restTemplate();

        assertNotNull(restTemplate);
        assertFalse(restTemplate.getRequestFactory() instanceof BufferingClientHttpRequestFactory);
    }

    @Test
    void restTemplateWithSSL() throws Exception {
        when(appProperties.isSslEnabled()).thenReturn(true);
        when(appProperties.getTrustStoreFile()).thenReturn("trustStoreFile");
        when(appProperties.getTrustStorePass()).thenReturn("trustStorePass");

        RestTemplate restTemplate = restTemplateConfig.restTemplate();

        assertNotNull(restTemplate);
        assertTrue(restTemplate.getRequestFactory() instanceof BufferingClientHttpRequestFactory);
    }

    @Test
    void restTemplateExceptionHandling() throws Exception {
        when(appProperties.isSslEnabled()).thenReturn(true);
        when(appProperties.getTrustStoreFile()).thenReturn("nonexistentFile"); // Simulate invalid file

        assertThrows(Exception.class, () -> restTemplateConfig.restTemplate());
    }
}
