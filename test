@Async("customAsyncExecutor")
    public void process(org.json.simple.JSONObject json) {
        try {
            String tradeId = getString(json, "TRADE_ID");
            String user = getString(json, "USER");

            ObjectMapper mapper = new ObjectMapper();

            List<PouMarkOffDtl> matchedPous = convertList(json, "MATCHED_POU", new TypeReference<List<PouMarkOffDtl>>() {});

            // Stream processing for null checks and optional chaining
            PouTradeDetail pouTradeDetail = getPouTradeDetail(tradeId, user, matchedPous);
            PouTradeDetails pouTradeDetails = pouTradeDetail.getDataPouCduResponse();

            // Convert to JSON while maintaining the order of fields
            String dataPouCduResponse = convertObjectToJson(pouTradeDetails);

            String trackingId = UUID.randomUUID().toString();

            TradeMaster tradeMaster = getTradeMaster(tradeId);
            Country country = getCountry(tradeMaster);

            if (country != null && country.isCdulakeEnabled()) {
                sendJMSMessageToSolace(dataPouCduResponse, trackingId);
                savePouTradeDetail(pouTradeDetail);
                log.info("Info saved to db");
            }

            sleep();
        } catch (Exception e) {
            handleException(e);
        }
    }

    private String getString(org.json.simple.JSONObject json, String key) {
        return Optional.ofNullable(json.get(key))
                .map(Object::toString)
                .orElse(null);
    }

    private <T> List<T> convertList(org.json.simple.JSONObject json, String key, TypeReference<List<T>> typeReference) {
        return Optional.ofNullable(json.get(key))
                .map(obj -> {
                    try {
                        return new ObjectMapper().readValue(obj.toString(), typeReference);
                    } catch (Exception e) {
                        handleException(e);
                        return null;
                    }
                })
                .orElse(null);
    }

    private PouTradeDetail getPouTradeDetail(String tradeId, String user, List<PouMarkOffDtl> matchedPous) {
        // Implement the getPouTradeDetail method
        // ...

        // For demonstration purposes, returning a dummy PouTradeDetail
        return new PouTradeDetail();
    }

    private TradeMaster getTradeMaster(String tradeId) {
        return Optional.ofNullable(tradeMasterRepo.findFirstByTradeRef(tradeId)).orElse(null);
    }

    private Country getCountry(TradeMaster tradeMaster) {
        return Optional.ofNullable(tradeMaster)
                .map(tm -> countryRepo.findByCode(tm.getEntity()))
                .orElse(null);
    }

    private void savePouTradeDetail(PouTradeDetail pouTradeDetail) {
        Optional.ofNullable(pouTradeDetailRepo.save(pouTradeDetail)).ifPresent(p -> log.info("Info saved to db"));
    }

    private void handleException(Exception e) {
        // Handle the exception appropriately (logging, rethrowing, etc.)
        e.printStackTrace();
    }
